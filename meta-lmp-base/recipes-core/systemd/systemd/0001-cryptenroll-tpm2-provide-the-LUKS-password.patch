From 8a41400c440159c6c6ada34ad6b90688ca1b9d64 Mon Sep 17 00:00:00 2001
From: Jorge Ramirez-Ortiz <jorge@foundries.io>
Date: Fri, 13 Oct 2023 13:25:07 +0200
Subject: [PATCH] cryptenroll-tpm2: generate LUKS password

Generate the secret passphrase required by LUKS to re-encrypt the volume using
the enrolled TPM2.

Upstream-Status: Inappropriate [lmp version specific]

Signed-off-by: Jorge Ramirez-Ortiz <jorge@foundries.io>
---
 src/cryptenroll/cryptenroll-tpm2.c | 12 ++++++++++++
 src/cryptenroll/cryptenroll-tpm2.h |  4 ++--
 src/cryptenroll/cryptenroll.c      | 23 ++++++++++++++++++++++-
 3 files changed, 36 insertions(+), 3 deletions(-)

diff --git a/src/cryptenroll/cryptenroll-tpm2.c b/src/cryptenroll/cryptenroll-tpm2.c
index 801014af11..aed9abf496 100644
--- a/src/cryptenroll/cryptenroll-tpm2.c
+++ b/src/cryptenroll/cryptenroll-tpm2.c
@@ -62,6 +62,7 @@ int enroll_tpm2(struct crypt_device *cd,
                 const void *volume_key,
                 size_t volume_key_size,
                 const char *device,
+                const char *out_passphrase,
                 uint32_t pcr_mask) {

         _cleanup_(erase_and_freep) void *secret = NULL, *secret2 = NULL;
@@ -131,6 +132,17 @@ int enroll_tpm2(struct crypt_device *cd,
         if (r < 0)
                 return log_error_errno(r, "Failed to add TPM2 JSON token to LUKS2 header: %m");

+        if (out_passphrase) {
+                FILE *dst = fopen(out_passphrase, "w+");
+                if (!dst)
+                        return log_error_errno(errno, "Failed to open TPM2 secret file: %m");
+                if (!fputs(base64_encoded, dst)) {
+                        fclose(dst);
+                        return log_error_errno(errno, "Failed to write to %s: %m", out_passphrase);
+                }
+                fclose(dst);
+        }
+
         log_info("New TPM2 token enrolled as key slot %i.", keyslot);
         return keyslot;
 }
diff --git a/src/cryptenroll/cryptenroll-tpm2.h b/src/cryptenroll/cryptenroll-tpm2.h
index d5dd1b0003..0689218b17 100644
--- a/src/cryptenroll/cryptenroll-tpm2.h
+++ b/src/cryptenroll/cryptenroll-tpm2.h
@@ -7,9 +7,9 @@
 #include "log.h"

 #if HAVE_TPM2
-int enroll_tpm2(struct crypt_device *cd, const void *volume_key, size_t volume_key_size, const char *device, uint32_t pcr_mask);
+int enroll_tpm2(struct crypt_device *cd, const void *volume_key, size_t volume_key_size, const char *device, const char *out_pass, uint32_t pcr_mask);
 #else
-static inline int enroll_tpm2(struct crypt_device *cd, const void *volume_key, size_t volume_key_size, const char *device, uint32_t pcr_mask) {
+static inline int enroll_tpm2(struct crypt_device *cd, const void *volume_key, size_t volume_key_size, const char *device, const char *out_pass, uint32_t pcr_mask) {
         return log_debug_errno(SYNTHETIC_ERRNO(EOPNOTSUPP),
                                "TPM2 key enrollment not supported.");
 }
diff --git a/src/cryptenroll/cryptenroll.c b/src/cryptenroll/cryptenroll.c
index c9bc9a2489..2f187cc8cc 100644
--- a/src/cryptenroll/cryptenroll.c
+++ b/src/cryptenroll/cryptenroll.c
@@ -31,6 +31,7 @@ static EnrollType arg_enroll_type = _ENROLL_TYPE_INVALID;
 static char *arg_pkcs11_token_uri = NULL;
 static char *arg_fido2_device = NULL;
 static char *arg_tpm2_device = NULL;
+static char *arg_tpm2_pass = NULL;
 static uint32_t arg_tpm2_pcr_mask = UINT32_MAX;
 static char *arg_node = NULL;
 static int *arg_wipe_slots = NULL;
@@ -44,6 +45,7 @@ assert_cc(sizeof(arg_wipe_slots_mask) * 8 >= _ENROLL_TYPE_MAX);
 STATIC_DESTRUCTOR_REGISTER(arg_pkcs11_token_uri, freep);
 STATIC_DESTRUCTOR_REGISTER(arg_fido2_device, freep);
 STATIC_DESTRUCTOR_REGISTER(arg_tpm2_device, freep);
+STATIC_DESTRUCTOR_REGISTER(arg_tpm2_pass, freep);
 STATIC_DESTRUCTOR_REGISTER(arg_node, freep);

 static bool wipe_requested(void) {
@@ -100,6 +102,8 @@ static int help(void) {
                "                       Enroll a TPM2 device\n"
                "     --tpm2-pcrs=PCR1+PCR2+PCR3+…\n"
                "                       Specify TPM2 PCRs to seal against\n"
+               "     --tpm2-pass=FILE\n"
+               "                       File where to export the TPM2 secret needed to reencrypt the volume\n"
                "     --wipe-slot=SLOT1,SLOT2,…\n"
                "                       Wipe specified slots\n"
                "\nSee the %s for details.\n",
@@ -120,6 +124,7 @@ static int parse_argv(int argc, char *argv[]) {
                 ARG_PKCS11_TOKEN_URI,
                 ARG_FIDO2_DEVICE,
                 ARG_TPM2_DEVICE,
+                ARG_TPM2_PASS,
                 ARG_TPM2_PCRS,
                 ARG_WIPE_SLOT,
                 ARG_FIDO2_WITH_PIN,
@@ -138,6 +143,7 @@ static int parse_argv(int argc, char *argv[]) {
                 { "fido2-with-user-presence",     required_argument, NULL, ARG_FIDO2_WITH_UP    },
                 { "fido2-with-user-verification", required_argument, NULL, ARG_FIDO2_WITH_UV    },
                 { "tpm2-device",                  required_argument, NULL, ARG_TPM2_DEVICE      },
+                 { "tpm2-pass",                    required_argument, NULL, ARG_TPM2_PASS        },
                 { "tpm2-pcrs",                    required_argument, NULL, ARG_TPM2_PCRS        },
                 { "wipe-slot",                    required_argument, NULL, ARG_WIPE_SLOT        },
                 {}
@@ -281,6 +287,21 @@ static int parse_argv(int argc, char *argv[]) {
                         break;
                 }

+                case ARG_TPM2_PASS: {
+                        _cleanup_free_ char *pass = NULL;
+
+                        if (arg_tpm2_pass)
+                                return log_error_errno(SYNTHETIC_ERRNO(EINVAL),
+                                                       "Multiple operations specified at once, refusing.");
+
+                        pass = strdup(optarg);
+                        if (!pass)
+                               return log_oom();
+
+                        arg_tpm2_pass = TAKE_PTR(pass);
+                        break;
+                }
+
                 case ARG_TPM2_PCRS: {
                         uint32_t mask;

@@ -564,7 +585,7 @@ static int run(int argc, char *argv[]) {
                 break;

         case ENROLL_TPM2:
-                slot = enroll_tpm2(cd, vk, vks, arg_tpm2_device, arg_tpm2_pcr_mask);
+                slot = enroll_tpm2(cd, vk, vks, arg_tpm2_device, arg_tpm2_pass, arg_tpm2_pcr_mask);
                 break;

         case _ENROLL_TYPE_INVALID:
--
2.34.1
